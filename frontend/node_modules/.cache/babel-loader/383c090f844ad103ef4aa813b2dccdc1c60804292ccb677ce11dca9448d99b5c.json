{"ast":null,"code":"import forge from'node-forge';class ClientCrypto{// Generate challenge signature for login\nstatic signChallenge(challenge,privateKeyPem){try{const privateKey=forge.pki.privateKeyFromPem(privateKeyPem);const md=forge.md.sha256.create();md.update(challenge,'utf8');const signature=privateKey.sign(md);return forge.util.encode64(signature);}catch(error){throw new Error('Failed to sign challenge: '+error.message);}}// Verify digital signature\nstatic verifySignature(data,signature,publicKeyPem){try{const publicKey=forge.pki.publicKeyFromPem(publicKeyPem);const md=forge.md.sha256.create();md.update(data,'utf8');const signatureBytes=forge.util.decode64(signature);return publicKey.verify(md.digest().bytes(),signatureBytes);}catch(error){return false;}}// Create digital signature\nstatic createSignature(data,privateKeyPem){try{const privateKey=forge.pki.privateKeyFromPem(privateKeyPem);const md=forge.md.sha256.create();md.update(data,'utf8');const signature=privateKey.sign(md);return forge.util.encode64(signature);}catch(error){throw new Error('Failed to create signature: '+error.message);}}// Encrypt data with public key (for small data like AES keys)\nstatic encryptWithPublicKey(data,publicKeyPem){try{const publicKey=forge.pki.publicKeyFromPem(publicKeyPem);const encrypted=publicKey.encrypt(data,'RSA-OAEP');return forge.util.encode64(encrypted);}catch(error){throw new Error('Failed to encrypt with public key: '+error.message);}}// Decrypt data with private key\nstatic decryptWithPrivateKey(encryptedData,privateKeyPem){try{const privateKey=forge.pki.privateKeyFromPem(privateKeyPem);const encrypted=forge.util.decode64(encryptedData);const decrypted=privateKey.decrypt(encrypted,'RSA-OAEP');return decrypted;}catch(error){throw new Error('Failed to decrypt with private key: '+error.message);}}// Generate random AES key\nstatic generateAESKey(){return forge.random.getBytesSync(32);// 256-bit key\n}// Encrypt data with AES\nstatic encryptAES(data,key){try{const cipher=forge.cipher.createCipher('AES-CBC',key);const iv=forge.random.getBytesSync(16);cipher.start({iv:iv});cipher.update(forge.util.createBuffer(data,'utf8'));cipher.finish();return{encrypted:forge.util.encode64(cipher.output.data),iv:forge.util.encode64(iv)};}catch(error){throw new Error('Failed to encrypt with AES: '+error.message);}}// Decrypt data with AES\nstatic decryptAES(encryptedData,key,iv){try{const decipher=forge.cipher.createDecipher('AES-CBC',key);const encryptedBytes=forge.util.decode64(encryptedData);const ivBytes=forge.util.decode64(iv);decipher.start({iv:ivBytes});decipher.update(forge.util.createBuffer(encryptedBytes));decipher.finish();return decipher.output.toString('utf8');}catch(error){throw new Error('Failed to decrypt with AES: '+error.message);}}// Generate hash\nstatic generateHash(data){const md=forge.md.sha256.create();md.update(data,'utf8');return md.digest().toHex();}// Validate PEM format\nstatic isValidPEM(pem){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'PRIVATE KEY';try{const regex=new RegExp(`-----BEGIN ${type}-----[\\\\s\\\\S]*-----END ${type}-----`);return regex.test(pem);}catch(error){return false;}}// Extract public key from certificate\nstatic getPublicKeyFromCert(certPem){try{const cert=forge.pki.certificateFromPem(certPem);return forge.pki.publicKeyToPem(cert.publicKey);}catch(error){throw new Error('Failed to extract public key from certificate');}}// Verify certificate validity\nstatic verifyCertificate(certPem){try{const cert=forge.pki.certificateFromPem(certPem);const now=new Date();return now>=cert.validity.notBefore&&now<=cert.validity.notAfter;}catch(error){return false;}}}export default ClientCrypto;","map":{"version":3,"names":["forge","ClientCrypto","signChallenge","challenge","privateKeyPem","privateKey","pki","privateKeyFromPem","md","sha256","create","update","signature","sign","util","encode64","error","Error","message","verifySignature","data","publicKeyPem","publicKey","publicKeyFromPem","signatureBytes","decode64","verify","digest","bytes","createSignature","encryptWithPublicKey","encrypted","encrypt","decryptWithPrivateKey","encryptedData","decrypted","decrypt","generateAESKey","random","getBytesSync","encryptAES","key","cipher","createCipher","iv","start","createBuffer","finish","output","decryptAES","decipher","createDecipher","encryptedBytes","ivBytes","toString","generateHash","toHex","isValidPEM","pem","type","arguments","length","undefined","regex","RegExp","test","getPublicKeyFromCert","certPem","cert","certificateFromPem","publicKeyToPem","verifyCertificate","now","Date","validity","notBefore","notAfter"],"sources":["/workspace/frontend/src/utils/crypto.js"],"sourcesContent":["import forge from 'node-forge';\n\nclass ClientCrypto {\n  // Generate challenge signature for login\n  static signChallenge(challenge, privateKeyPem) {\n    try {\n      const privateKey = forge.pki.privateKeyFromPem(privateKeyPem);\n      const md = forge.md.sha256.create();\n      md.update(challenge, 'utf8');\n      const signature = privateKey.sign(md);\n      return forge.util.encode64(signature);\n    } catch (error) {\n      throw new Error('Failed to sign challenge: ' + error.message);\n    }\n  }\n\n  // Verify digital signature\n  static verifySignature(data, signature, publicKeyPem) {\n    try {\n      const publicKey = forge.pki.publicKeyFromPem(publicKeyPem);\n      const md = forge.md.sha256.create();\n      md.update(data, 'utf8');\n      const signatureBytes = forge.util.decode64(signature);\n      return publicKey.verify(md.digest().bytes(), signatureBytes);\n    } catch (error) {\n      return false;\n    }\n  }\n\n  // Create digital signature\n  static createSignature(data, privateKeyPem) {\n    try {\n      const privateKey = forge.pki.privateKeyFromPem(privateKeyPem);\n      const md = forge.md.sha256.create();\n      md.update(data, 'utf8');\n      const signature = privateKey.sign(md);\n      return forge.util.encode64(signature);\n    } catch (error) {\n      throw new Error('Failed to create signature: ' + error.message);\n    }\n  }\n\n  // Encrypt data with public key (for small data like AES keys)\n  static encryptWithPublicKey(data, publicKeyPem) {\n    try {\n      const publicKey = forge.pki.publicKeyFromPem(publicKeyPem);\n      const encrypted = publicKey.encrypt(data, 'RSA-OAEP');\n      return forge.util.encode64(encrypted);\n    } catch (error) {\n      throw new Error('Failed to encrypt with public key: ' + error.message);\n    }\n  }\n\n  // Decrypt data with private key\n  static decryptWithPrivateKey(encryptedData, privateKeyPem) {\n    try {\n      const privateKey = forge.pki.privateKeyFromPem(privateKeyPem);\n      const encrypted = forge.util.decode64(encryptedData);\n      const decrypted = privateKey.decrypt(encrypted, 'RSA-OAEP');\n      return decrypted;\n    } catch (error) {\n      throw new Error('Failed to decrypt with private key: ' + error.message);\n    }\n  }\n\n  // Generate random AES key\n  static generateAESKey() {\n    return forge.random.getBytesSync(32); // 256-bit key\n  }\n\n  // Encrypt data with AES\n  static encryptAES(data, key) {\n    try {\n      const cipher = forge.cipher.createCipher('AES-CBC', key);\n      const iv = forge.random.getBytesSync(16);\n      cipher.start({ iv: iv });\n      cipher.update(forge.util.createBuffer(data, 'utf8'));\n      cipher.finish();\n      \n      return {\n        encrypted: forge.util.encode64(cipher.output.data),\n        iv: forge.util.encode64(iv)\n      };\n    } catch (error) {\n      throw new Error('Failed to encrypt with AES: ' + error.message);\n    }\n  }\n\n  // Decrypt data with AES\n  static decryptAES(encryptedData, key, iv) {\n    try {\n      const decipher = forge.cipher.createDecipher('AES-CBC', key);\n      const encryptedBytes = forge.util.decode64(encryptedData);\n      const ivBytes = forge.util.decode64(iv);\n      \n      decipher.start({ iv: ivBytes });\n      decipher.update(forge.util.createBuffer(encryptedBytes));\n      decipher.finish();\n      \n      return decipher.output.toString('utf8');\n    } catch (error) {\n      throw new Error('Failed to decrypt with AES: ' + error.message);\n    }\n  }\n\n  // Generate hash\n  static generateHash(data) {\n    const md = forge.md.sha256.create();\n    md.update(data, 'utf8');\n    return md.digest().toHex();\n  }\n\n  // Validate PEM format\n  static isValidPEM(pem, type = 'PRIVATE KEY') {\n    try {\n      const regex = new RegExp(`-----BEGIN ${type}-----[\\\\s\\\\S]*-----END ${type}-----`);\n      return regex.test(pem);\n    } catch (error) {\n      return false;\n    }\n  }\n\n  // Extract public key from certificate\n  static getPublicKeyFromCert(certPem) {\n    try {\n      const cert = forge.pki.certificateFromPem(certPem);\n      return forge.pki.publicKeyToPem(cert.publicKey);\n    } catch (error) {\n      throw new Error('Failed to extract public key from certificate');\n    }\n  }\n\n  // Verify certificate validity\n  static verifyCertificate(certPem) {\n    try {\n      const cert = forge.pki.certificateFromPem(certPem);\n      const now = new Date();\n      return now >= cert.validity.notBefore && now <= cert.validity.notAfter;\n    } catch (error) {\n      return false;\n    }\n  }\n}\n\nexport default ClientCrypto;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,YAAY,CAE9B,KAAM,CAAAC,YAAa,CACjB;AACA,MAAO,CAAAC,aAAaA,CAACC,SAAS,CAAEC,aAAa,CAAE,CAC7C,GAAI,CACF,KAAM,CAAAC,UAAU,CAAGL,KAAK,CAACM,GAAG,CAACC,iBAAiB,CAACH,aAAa,CAAC,CAC7D,KAAM,CAAAI,EAAE,CAAGR,KAAK,CAACQ,EAAE,CAACC,MAAM,CAACC,MAAM,CAAC,CAAC,CACnCF,EAAE,CAACG,MAAM,CAACR,SAAS,CAAE,MAAM,CAAC,CAC5B,KAAM,CAAAS,SAAS,CAAGP,UAAU,CAACQ,IAAI,CAACL,EAAE,CAAC,CACrC,MAAO,CAAAR,KAAK,CAACc,IAAI,CAACC,QAAQ,CAACH,SAAS,CAAC,CACvC,CAAE,MAAOI,KAAK,CAAE,CACd,KAAM,IAAI,CAAAC,KAAK,CAAC,4BAA4B,CAAGD,KAAK,CAACE,OAAO,CAAC,CAC/D,CACF,CAEA;AACA,MAAO,CAAAC,eAAeA,CAACC,IAAI,CAAER,SAAS,CAAES,YAAY,CAAE,CACpD,GAAI,CACF,KAAM,CAAAC,SAAS,CAAGtB,KAAK,CAACM,GAAG,CAACiB,gBAAgB,CAACF,YAAY,CAAC,CAC1D,KAAM,CAAAb,EAAE,CAAGR,KAAK,CAACQ,EAAE,CAACC,MAAM,CAACC,MAAM,CAAC,CAAC,CACnCF,EAAE,CAACG,MAAM,CAACS,IAAI,CAAE,MAAM,CAAC,CACvB,KAAM,CAAAI,cAAc,CAAGxB,KAAK,CAACc,IAAI,CAACW,QAAQ,CAACb,SAAS,CAAC,CACrD,MAAO,CAAAU,SAAS,CAACI,MAAM,CAAClB,EAAE,CAACmB,MAAM,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,CAAEJ,cAAc,CAAC,CAC9D,CAAE,MAAOR,KAAK,CAAE,CACd,MAAO,MAAK,CACd,CACF,CAEA;AACA,MAAO,CAAAa,eAAeA,CAACT,IAAI,CAAEhB,aAAa,CAAE,CAC1C,GAAI,CACF,KAAM,CAAAC,UAAU,CAAGL,KAAK,CAACM,GAAG,CAACC,iBAAiB,CAACH,aAAa,CAAC,CAC7D,KAAM,CAAAI,EAAE,CAAGR,KAAK,CAACQ,EAAE,CAACC,MAAM,CAACC,MAAM,CAAC,CAAC,CACnCF,EAAE,CAACG,MAAM,CAACS,IAAI,CAAE,MAAM,CAAC,CACvB,KAAM,CAAAR,SAAS,CAAGP,UAAU,CAACQ,IAAI,CAACL,EAAE,CAAC,CACrC,MAAO,CAAAR,KAAK,CAACc,IAAI,CAACC,QAAQ,CAACH,SAAS,CAAC,CACvC,CAAE,MAAOI,KAAK,CAAE,CACd,KAAM,IAAI,CAAAC,KAAK,CAAC,8BAA8B,CAAGD,KAAK,CAACE,OAAO,CAAC,CACjE,CACF,CAEA;AACA,MAAO,CAAAY,oBAAoBA,CAACV,IAAI,CAAEC,YAAY,CAAE,CAC9C,GAAI,CACF,KAAM,CAAAC,SAAS,CAAGtB,KAAK,CAACM,GAAG,CAACiB,gBAAgB,CAACF,YAAY,CAAC,CAC1D,KAAM,CAAAU,SAAS,CAAGT,SAAS,CAACU,OAAO,CAACZ,IAAI,CAAE,UAAU,CAAC,CACrD,MAAO,CAAApB,KAAK,CAACc,IAAI,CAACC,QAAQ,CAACgB,SAAS,CAAC,CACvC,CAAE,MAAOf,KAAK,CAAE,CACd,KAAM,IAAI,CAAAC,KAAK,CAAC,qCAAqC,CAAGD,KAAK,CAACE,OAAO,CAAC,CACxE,CACF,CAEA;AACA,MAAO,CAAAe,qBAAqBA,CAACC,aAAa,CAAE9B,aAAa,CAAE,CACzD,GAAI,CACF,KAAM,CAAAC,UAAU,CAAGL,KAAK,CAACM,GAAG,CAACC,iBAAiB,CAACH,aAAa,CAAC,CAC7D,KAAM,CAAA2B,SAAS,CAAG/B,KAAK,CAACc,IAAI,CAACW,QAAQ,CAACS,aAAa,CAAC,CACpD,KAAM,CAAAC,SAAS,CAAG9B,UAAU,CAAC+B,OAAO,CAACL,SAAS,CAAE,UAAU,CAAC,CAC3D,MAAO,CAAAI,SAAS,CAClB,CAAE,MAAOnB,KAAK,CAAE,CACd,KAAM,IAAI,CAAAC,KAAK,CAAC,sCAAsC,CAAGD,KAAK,CAACE,OAAO,CAAC,CACzE,CACF,CAEA;AACA,MAAO,CAAAmB,cAAcA,CAAA,CAAG,CACtB,MAAO,CAAArC,KAAK,CAACsC,MAAM,CAACC,YAAY,CAAC,EAAE,CAAC,CAAE;AACxC,CAEA;AACA,MAAO,CAAAC,UAAUA,CAACpB,IAAI,CAAEqB,GAAG,CAAE,CAC3B,GAAI,CACF,KAAM,CAAAC,MAAM,CAAG1C,KAAK,CAAC0C,MAAM,CAACC,YAAY,CAAC,SAAS,CAAEF,GAAG,CAAC,CACxD,KAAM,CAAAG,EAAE,CAAG5C,KAAK,CAACsC,MAAM,CAACC,YAAY,CAAC,EAAE,CAAC,CACxCG,MAAM,CAACG,KAAK,CAAC,CAAED,EAAE,CAAEA,EAAG,CAAC,CAAC,CACxBF,MAAM,CAAC/B,MAAM,CAACX,KAAK,CAACc,IAAI,CAACgC,YAAY,CAAC1B,IAAI,CAAE,MAAM,CAAC,CAAC,CACpDsB,MAAM,CAACK,MAAM,CAAC,CAAC,CAEf,MAAO,CACLhB,SAAS,CAAE/B,KAAK,CAACc,IAAI,CAACC,QAAQ,CAAC2B,MAAM,CAACM,MAAM,CAAC5B,IAAI,CAAC,CAClDwB,EAAE,CAAE5C,KAAK,CAACc,IAAI,CAACC,QAAQ,CAAC6B,EAAE,CAC5B,CAAC,CACH,CAAE,MAAO5B,KAAK,CAAE,CACd,KAAM,IAAI,CAAAC,KAAK,CAAC,8BAA8B,CAAGD,KAAK,CAACE,OAAO,CAAC,CACjE,CACF,CAEA;AACA,MAAO,CAAA+B,UAAUA,CAACf,aAAa,CAAEO,GAAG,CAAEG,EAAE,CAAE,CACxC,GAAI,CACF,KAAM,CAAAM,QAAQ,CAAGlD,KAAK,CAAC0C,MAAM,CAACS,cAAc,CAAC,SAAS,CAAEV,GAAG,CAAC,CAC5D,KAAM,CAAAW,cAAc,CAAGpD,KAAK,CAACc,IAAI,CAACW,QAAQ,CAACS,aAAa,CAAC,CACzD,KAAM,CAAAmB,OAAO,CAAGrD,KAAK,CAACc,IAAI,CAACW,QAAQ,CAACmB,EAAE,CAAC,CAEvCM,QAAQ,CAACL,KAAK,CAAC,CAAED,EAAE,CAAES,OAAQ,CAAC,CAAC,CAC/BH,QAAQ,CAACvC,MAAM,CAACX,KAAK,CAACc,IAAI,CAACgC,YAAY,CAACM,cAAc,CAAC,CAAC,CACxDF,QAAQ,CAACH,MAAM,CAAC,CAAC,CAEjB,MAAO,CAAAG,QAAQ,CAACF,MAAM,CAACM,QAAQ,CAAC,MAAM,CAAC,CACzC,CAAE,MAAOtC,KAAK,CAAE,CACd,KAAM,IAAI,CAAAC,KAAK,CAAC,8BAA8B,CAAGD,KAAK,CAACE,OAAO,CAAC,CACjE,CACF,CAEA;AACA,MAAO,CAAAqC,YAAYA,CAACnC,IAAI,CAAE,CACxB,KAAM,CAAAZ,EAAE,CAAGR,KAAK,CAACQ,EAAE,CAACC,MAAM,CAACC,MAAM,CAAC,CAAC,CACnCF,EAAE,CAACG,MAAM,CAACS,IAAI,CAAE,MAAM,CAAC,CACvB,MAAO,CAAAZ,EAAE,CAACmB,MAAM,CAAC,CAAC,CAAC6B,KAAK,CAAC,CAAC,CAC5B,CAEA;AACA,MAAO,CAAAC,UAAUA,CAACC,GAAG,CAAwB,IAAtB,CAAAC,IAAI,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,aAAa,CACzC,GAAI,CACF,KAAM,CAAAG,KAAK,CAAG,GAAI,CAAAC,MAAM,CAAC,cAAcL,IAAI,0BAA0BA,IAAI,OAAO,CAAC,CACjF,MAAO,CAAAI,KAAK,CAACE,IAAI,CAACP,GAAG,CAAC,CACxB,CAAE,MAAO1C,KAAK,CAAE,CACd,MAAO,MAAK,CACd,CACF,CAEA;AACA,MAAO,CAAAkD,oBAAoBA,CAACC,OAAO,CAAE,CACnC,GAAI,CACF,KAAM,CAAAC,IAAI,CAAGpE,KAAK,CAACM,GAAG,CAAC+D,kBAAkB,CAACF,OAAO,CAAC,CAClD,MAAO,CAAAnE,KAAK,CAACM,GAAG,CAACgE,cAAc,CAACF,IAAI,CAAC9C,SAAS,CAAC,CACjD,CAAE,MAAON,KAAK,CAAE,CACd,KAAM,IAAI,CAAAC,KAAK,CAAC,+CAA+C,CAAC,CAClE,CACF,CAEA;AACA,MAAO,CAAAsD,iBAAiBA,CAACJ,OAAO,CAAE,CAChC,GAAI,CACF,KAAM,CAAAC,IAAI,CAAGpE,KAAK,CAACM,GAAG,CAAC+D,kBAAkB,CAACF,OAAO,CAAC,CAClD,KAAM,CAAAK,GAAG,CAAG,GAAI,CAAAC,IAAI,CAAC,CAAC,CACtB,MAAO,CAAAD,GAAG,EAAIJ,IAAI,CAACM,QAAQ,CAACC,SAAS,EAAIH,GAAG,EAAIJ,IAAI,CAACM,QAAQ,CAACE,QAAQ,CACxE,CAAE,MAAO5D,KAAK,CAAE,CACd,MAAO,MAAK,CACd,CACF,CACF,CAEA,cAAe,CAAAf,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}